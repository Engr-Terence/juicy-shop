name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  IMAGE_NAME: engrenzo/juicy-shop-app
  IMAGE_TAG: juicy-shop-app-1.1
#   DOCKER_USER: ${{ secrets.DOCKER_USER }}
#   DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

jobs:
  # Cache dependencies with Yarn
  create_cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: yarn install
      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules/
            .yarn

          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

  # Run tests with Yarn
  yarn_test:
    runs-on: ubuntu-latest
    needs: create_cache
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules/
            .yarn

          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
      - name: Run tests
        run: yarn test

  # Run Gitleaks security scan
#   gitleaks:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Run Gitleaks
#         uses: gitleaks/gitleaks-action@v2
#         continue-on-error: true
#         env:
#           GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
#         with:
#           args: "detect --redact -v --exit-code=2 --report-format=json --report-path=gitleaks.json --log-level=debug"
#       - name: List files
#         run: find . -type f
#       - name: Rename Gitleaks report to gitleaks.json
#         run: mv gitleaks-results.sarif gitleaks.json || echo "file already exist"
#       - name: Upload Gitleaks report
#         uses: actions/upload-artifact@v3
#         with:
#           name: gitleaks.json
#           path: gitleaks.json
  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Gitleaks
      run: |
        curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.16.1/gitleaks_8.16.1_linux_x64.tar.gz | tar -xvzf - -C /usr/local/bin
        gitleaks version
    - name: Run Gitleaks
      run: |
        gitleaks detect --redact -v --exit-code=2 --report-format=json --report-path=gitleaks.json --log-level=debug
      continue-on-error: true
      env:
        GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false

    - name: Upload Gitleaks report
      uses: actions/upload-artifact@v3
      with:
        name: gitleaks.json
        path: gitleaks.json

  # Run NJSSCAN security scan
  njsscan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install njsscan
        run: pip3 install --upgrade njsscan
      - name: Run njsscan
        run:  njsscan . --sarif -o njsscan.sarif
      - name: Upload NJSSCAN report
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: njsscan.sarif
          path: njsscan.sarif

  # Run Semgrep
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install-Semgrep
        run: pip3 install --upgrade semgrep
      - name: Run Semgrep
        run: semgrep scan --config p/javascript --json --output semgrep.json
      - name: Upload samgrep
        uses: actions/upload-artifact@v3
        with:
          name: semgrep.json
          path: semgrep.json

  # Run Retire.js security scan
  retire:
    runs-on: ubuntu-latest
    container:
        image: node:18-bullseye
    needs: create_cache
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules/
            .yarn

          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --network-timeout 60000 --registry=https://registry.npmjs.org
      - name: List Installed Dependencies
        run: ls -R ./node_modules
      - name: Install Retire.js
        run: npm install -g retire
      - name: Run Retire.js
        run: retire --path ./node_modules --outputformat json --outputpath ./retire.json --verbose
        continue-on-error: true
      - name: Upload Retire.js report
        uses: actions/upload-artifact@v3
        with:
          name: retire.json
          path: ./retire.json

      - name: Install jq
        run: |
          apt-get update
          apt-get install -y jq
      - name: view test results for njsscan
        run: jq . retire.json

# Upload all reports after testing
  upload_reports:
    runs-on: ubuntu-latest
    needs: [gitleaks, njsscan, semgrep, retire]
    steps:
      - name: Create reports directory
        run: mkdir -p ./reports

      - name: Download Gitleaks report
        uses: actions/download-artifact@v3
        with:
          name: gitleaks.json
          path: ./reports
  
      - name: Download NJSSCAN report
        uses: actions/download-artifact@v3
        with:
          name: njsscan.sarif
          path: ./reports
  
      - name: Download Semgrep report
        uses: actions/download-artifact@v3
        with:
          name: semgrep.json
          path: ./reports
  
      - name: Download Retire.js report
        uses: actions/download-artifact@v3
        with:
          name: retire.json
          path: ./reports

      # Install Python dependencies
      - name: Install Python dependencies
        run: pip install requests
      - name: Make the Python script executable
        run: chmod +x ./upload-results.py
      # Now, process and upload these reports using Python script
      - name: Process and Upload Reports
        run: |
          python3 upload-results.py ./reports/gitleaks.json
          python3 upload-results.py ./reports/njsscan.sarif
          python3 upload-results.py ./reports/semgrep.json
          python3 upload-results.py ./reports/retire.json  
          echo "Results Uploaded Successfully!"
          
          
          
# Build Docker image and push to DockerHub

  build_image:
    runs-on: ubuntu-latest
    needs: yarn_test
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
      - name: Build and push Docker image
        run: |
          docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} .
          docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
